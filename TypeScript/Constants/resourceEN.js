var langConstant = "en";
var lang = {
    MemoryToolBarTitle: "MEMORY",
    MemoryInnerToolBarTitle: "memory:",
    OutputToolBarTitle: "OUTPUT",
    BegginingBlockBegin: "Begin",
    BegginingBlockEnd: "End",
    WhileBlockCondition: "While",
    DoWhileBlockCondition: "While",
    IfBlockTrueCondition: "True",
    IfBlockFalseCondition: "False",
    CodeTitleSentence: "Pseudocode",
    //New Block PopUp
    NewBlockitlePopUp: "Choose Block to Create",
    //Container Block PopUp
    ContainerBlockTitlePopUp: "Create New Block",
    ContainerBlockMessagePopUp: "Insert a valid expression: ",
    ContainerBlockEditMessagePopUp: "Edit block expression: ",
    ContainerBlockEditTitlePopUp: "Edit Block",
    //Define Block PopUp
    DefineBlockTitlePopUp: "Create New Block",
    DefineBlockEditTitlePopUp: "Edit Block",
    DefineErrorErasingBlockMessage: "By erasing this varibale you might cause some colateral, check for highlited blocks",
    DefineBlockVariableTypeLabel: "Variable Type:",
    DefineBlockVariableNameLabel: "Variable Name:",
    DefineBlockVariableValueLabel: "Default Value:",
    //variableTypesName
    variableTypesNameNumber: "number",
    variableTypesNameString: "string",
    variableTypesNameBoolean: "boolean",
    //Read Block PopUp
    ReadBlockInstructionPopUp: "Variable to read :",
    ReadBlockTitlePopUp: "Create New Block",
    ReadBlockPopUpError: "No variables to be selected!",
    ReadBlockExecutionTextOne: "Insert value for ",
    ReadBlockExecutionTextTwo: "and press confirm :",
    ReadBlockEditTitlePopUp: "Edit Block",
    BreakBlockEditTitlePopUp: "Edit Block",
    //Button Translations 
    ButtonCreatePopUp: "Create Block",
    CloseButtonSentence: "Close",
    ButtonEditPopUp: "Edit Block",
    ButtonRemovePopUp: "Remove Block",
    ButtonCancelPopUp: "Cancel",
    ButtonConfirmPopUp: "Confirm",
    //Block name translation
    WhileBlock: "While Block",
    IfBlock: "If Block",
    DefineBlock: "Define Block",
    ReadBlock: "Read Block",
    ExecuteBlock: "Execute Block",
    WriteBlock: "Write Block",
    DoWhileBlock: "Do While Block",
    BreakBlock: "Break block",
    ContinueBlock: "Break block",
    //BreakBlock Fixed Instruction
    BreakBlockInstruction: "Break",
    ContinueBlockInstruction: "Contiue",
    //HelpPopUp
    HelpPopUpAbout: "About",
    HelpPopUpTitle: "Help Menu",
    HelpPopUpTemplateTab: "Algorithms",
    HelpPopUpBlocksTab: "Blocks",
    compareTwoNumberAlgSentence: "Compare two numbers",
    evenNumbersAlgSentence: "First 25 even numbers",
    oddNumbersAlgSentence: "First 25 odd numbers",
    multiplicationAlgSentence: "Multiplication Table",
    pyramidAlgSentence: "Pyramid",
    fibonacciAlgSentence: "Fibonacci Series",
    twoNumberAvarageAlgSentence: "2 Number Avarage",
    quadraticEquationAlgSentence: "Quadratic Equation",
    calculateTanAlgSentence: "Calculate Tan",
    calculateSinAlgSentence: "Calculate Sin",
    calculateCosAlgSentence: "Calculate Cos",
    masterTabAlgDecisionSentence: "Decision",
    masterTabAlgIterationSentence: "Iteration",
    masterTabAlgCalculeSentence: "Calculation",
    templatesTabInnerTitle: "algorithms",
    templatesTabOutterTitle: "ALGORITHMS",
    compare_two_CodeToParse: [
        "BEGIN Compare_Two",
        'WRITE "Comparar dois números\\n"',
        'WRITE "Introduza um valor inteiro positivo para A: \\n"',
        "DECLARE number A 0",
        "READ A",
        'WRITE "Introduza um valor inteiro positivo para B: \\n"',
        "DECLARE number B 0",
        "READ B",
        "IF A == B",
        'WRITE "Os números fornecidos são iguais! \\n" ',
        'ELSE',
        'IF A > B',
        'WRITE "O número A é maior"',
        'ELSE',
        'WRITE "O número B é Maior"',
        'END IF',
        'END IF',
        'END Compare_Two'
    ],
    multiplication_tables_CodeToParse: [
        'BEGIN multiplication_tables',
        'WRITE "Calculo da tabuada \\n"',
        'WRITE "Introduza um valor inteiro positivo para tabuada \\n"',
        'DECLARE number numero 0',
        'READ numero',
        'IF numero <= 10 && numero >= 0',
        'DECLARE number auxiliar 0',
        'WHILE auxiliar < 10',
        'EXECUTE auxiliar = auxiliar + 1',
        'WRITE numero + " * " + auxiliar + " = " + (numero * auxiliar) + "\\n"',
        'END WHILE',
        'ELSE',
        'WRITE "Número inválido para calcular"',
        'END IF',
        'END multiplication_tables'
    ],
    first_25_even_numbers_CodeToParse: [
        'BEGIN first_25_pair_numbers',
        'WRITE "Primeiros 25 números par \\n"',
        'DECLARE number primeiroNumero 0',
        'WHILE primeiroNumero < 50',
        'EXECUTE primeiroNumero = primeiroNumero + 1',
        'IF primeiroNumero % 2 == 0',
        'WRITE "O número " + primeiroNumero + " é par! \\n"',
        'END IF',
        'END WHILE',
        'END first_25_pair_numbers'
    ],
    first_25_odd_numbers_CodeToParse: [
        'BEGIN first_25_pair_numbers',
        'WRITE "Primeiros 25 números ímpar \\n"',
        'DECLARE number primeiroNumero 0',
        'WHILE primeiroNumero < 50',
        'EXECUTE primeiroNumero = primeiroNumero + 1',
        'IF primeiroNumero % 2 != 0',
        'WRITE "O número " + primeiroNumero + " é ímpar! \\n"',
        'END IF',
        'END WHILE',
        'END first_25_pair_numbers'
    ],
    finonacci_series_CodeToParse: [
        'BEGIN FinonacciSeries',
        'WRITE "Série Fibonacci\\n"',
        'DECLARE number anterior 0',
        'DECLARE number actual 1',
        'DECLARE number aux 1',
        'WHILE aux < 10',
        'EXECUTE aux ++',
        'WRITE "\\n" + actual',
        'DECLARE number proximo anterior + actual',
        'EXECUTE anterior = actual',
        'EXECUTE actual = proximo',
        'END WHILE',
        'END FinonacciSeries'
    ],
    number_avarage_CodeToParse: [
        'BEGIN TwoNumbersAvarage',
        'WRITE "Média Aritmética de 2 Números\\n"',
        "DECLARE number media 0",
        'WRITE "Introduza um valor inteiro positivo para A: \\n"',
        "DECLARE number A 0",
        "READ A",
        'WRITE "Introduza um valor inteiro positivo para B: \\n"',
        "DECLARE number B 0",
        "READ B",
        'EXECUTE media = (A + B)/2',
        'WRITE "média: " + media',
        'END TwoNumbersAvarage'
    ],
    piramide_CodeToParse: [
        'BEGIN MySecondProject',
        'WRITE "Piramide \\n"',
        'WRITE "Insira um valor inteiro positivo para número de linhas \\n"',
        'DECLARE number linhas 0',
        'READ linhas',
        'WHILE linhas > 0',
        'DECLARE number colunas linhas',
        'WHILE colunas > 0',
        'WRITE "*"',
        'EXECUTE colunas --',
        'END WHILE',
        'EXECUTE linhas --',
        'WRITE "\\n"',
        'END WHILE',
        'END MySecondProject'
    ],
    quadratic_equation_CodeToParse: [
        'BEGIN QuadraticEquation',
        'WRITE "Equação de 2º grau\\n"',
        "DECLARE number x1 0",
        "DECLARE number x2 0",
        'WRITE "Introduza um valor para a: \\n"',
        "DECLARE number a 0",
        "READ a",
        'WRITE "Introduza um valor para b: \\n"',
        "DECLARE number b 0",
        "READ b",
        'WRITE "Introduza um valor para c: \\n"',
        "DECLARE number c 0",
        "READ c",
        'EXECUTE x1 = (-b + Math.sqrt((Math.pow(b,2) - 4*a*c)))/(2*a)',
        'EXECUTE x2 = (-b - Math.sqrt((Math.pow(b,2) - 4*a*c)))/(2*a)',
        'WRITE "x1 = " + x1 +  " v x2 = " + x2',
        'END QuadraticEquation'
    ],
    math_sin_CodeToParse: [
        'BEGIN Sin',
        'WRITE "Calcular Seno\\n"',
        'DECLARE number numero 0',
        'READ numero',
        'EXECUTE numero = Math.sin(numero)',
        'WRITE numero + ""',
        'END Sin'
    ],
    math_tan_CodeToParse: [
        'BEGIN Tan',
        'WRITE "Calcular Tangente\\n"',
        'DECLARE number numero 0',
        'READ numero',
        'EXECUTE numero = Math.tan(numero)',
        'WRITE numero + ""',
        'END Tan'
    ],
    math_cos_CodeToParse: [
        'BEGIN Cos',
        'WRITE "Calcular Cosseno\\n"',
        'DECLARE number numero 0',
        'READ numero',
        'EXECUTE numero = Math.cos(numero)',
        'WRITE numero + ""',
        'END Cos'
    ],
};
var fluxogramLanguageEN = {
    MemoryToolBarTitle: "MEMORY",
    MemoryInnerToolBarTitle: "memory:",
    OutputToolBarTitle: "OUTPUT",
    BegginingBlockBegin: "Begin",
    BegginingBlockEnd: "End",
    WhileBlockCondition: "While",
    DoWhileBlockCondition: "While",
    IfBlockTrueCondition: "True",
    IfBlockFalseCondition: "False",
    CodeTitleSentence: "Pseudocode",
    //New Block PopUp
    NewBlockitlePopUp: "Choose Block to Create",
    //Container Block PopUp
    ContainerBlockTitlePopUp: "Create New Block",
    ContainerBlockMessagePopUp: "Insert a valid expression: ",
    ContainerBlockEditMessagePopUp: "Edit block expression: ",
    ContainerBlockEditTitlePopUp: "Edit Block",
    //Define Block PopUp
    DefineBlockTitlePopUp: "Create New Block",
    DefineBlockEditTitlePopUp: "Edit Block",
    DefineErrorErasingBlockMessage: "By erasing this varibale you might cause some colateral, check for highlited blocks",
    DefineBlockVariableTypeLabel: "Variable Type:",
    DefineBlockVariableNameLabel: "Variable Name:",
    DefineBlockVariableValueLabel: "Default Value:",
    //variableTypesName
    variableTypesNameNumber: "number",
    variableTypesNameString: "string",
    variableTypesNameBoolean: "boolean",
    //Read Block PopUp
    ReadBlockInstructionPopUp: "Variable to read :",
    ReadBlockTitlePopUp: "Create New Block",
    ReadBlockPopUpError: "No variables to be selected!",
    ReadBlockExecutionTextOne: "Insert value for ",
    ReadBlockExecutionTextTwo: " and press confirm :",
    ReadBlockEditTitlePopUp: "Edit Block",
    BreakBlockEditTitlePopUp: "Edit Block",
    //Button Translations 
    ButtonCreatePopUp: "Create Block",
    CloseButtonSentence: "Close",
    ButtonEditPopUp: "Edit Block",
    ButtonRemovePopUp: "Remove Block",
    ButtonCancelPopUp: "Cancel",
    ButtonConfirmPopUp: "Confirm",
    //Block name translation
    WhileBlock: "While Block",
    IfBlock: "If Block",
    DefineBlock: "Define Block",
    ReadBlock: "Read Block",
    ExecuteBlock: "Execute Block",
    WriteBlock: "Write Block",
    DoWhileBlock: "Do While Block",
    BreakBlock: "Break block",
    ContinueBlock: "Break block",
    //BreakBlock Fixed Instruction
    BreakBlockInstruction: "Break",
    ContinueBlockInstruction: "Contiue",
    //HelpPopUp
    HelpPopUpAbout: "About",
    HelpPopUpTitle: "Help Menu",
    HelpPopUpTemplateTab: "Algorithms",
    HelpPopUpBlocksTab: "Blocks",
    compareTwoNumberAlgSentence: "Compare two numbers",
    evenNumbersAlgSentence: "First 25 even numbers",
    oddNumbersAlgSentence: "First 25 odd numbers",
    multiplicationAlgSentence: "Multiplication Table",
    pyramidAlgSentence: "Pyramid",
    fibonacciAlgSentence: "Fibonacci Series",
    twoNumberAvarageAlgSentence: "2 Number Avarage",
    quadraticEquationAlgSentence: "Quadratic Equation",
    calculateTanAlgSentence: "Calculate Tan",
    calculateSinAlgSentence: "Calculate Sin",
    calculateCosAlgSentence: "Calculate Cos",
    masterTabAlgDecisionSentence: "Decision",
    masterTabAlgIterationSentence: "Iteration",
    masterTabAlgCalculeSentence: "Calculation",
    templatesTabInnerTitle: "algorithms:",
    templatesTabOutterTitle: "ALGORITHMS",
    compare_two_CodeToParse: [
        "BEGIN Compare_Two",
        'WRITE "Compare two numbers\\n"',
        'WRITE "Insert value for A: \\n"',
        "DECLARE number A 0",
        "READ A",
        'WRITE "Insert value for  B: \\n"',
        "DECLARE number B 0",
        "READ B",
        "IF A == B",
        'WRITE "The supplied numbers are equal! \\n" ',
        'ELSE',
        'IF A > B',
        'WRITE "A is bigger"',
        'ELSE',
        'WRITE "B é bigger"',
        'END IF',
        'END IF',
        'END Compare_Two'
    ],
    multiplication_tables_CodeToParse: [
        'BEGIN multiplication_tables',
        'WRITE "Multiplication Tables \\n"',
        'WRITE "Value for multiplication tables \\n"',
        'DECLARE number number 0',
        'READ number',
        'IF number <= 10 && number >= 0',
        'DECLARE number auxiliar 0',
        'WHILE auxiliar < 10',
        'EXECUTE auxiliar = auxiliar + 1',
        'WRITE number + " * " + auxiliar + " = " + (number * auxiliar) + "\\n"',
        'END WHILE',
        'ELSE',
        'WRITE "Invalid number to calculate"',
        'END IF',
        'END multiplication_tables'
    ],
    first_25_even_numbers_CodeToParse: [
        'BEGIN first_25_pair_numbers',
        'WRITE "First 25 even numbers \\n"',
        'DECLARE number firstNumber 0',
        'WHILE firstNumber < 50',
        'EXECUTE firstNumber = firstNumber + 1',
        'IF firstNumber % 2 == 0',
        'WRITE firstNumber + " is even \\n"',
        'END IF',
        'END WHILE',
        'END first_25_pair_numbers'
    ],
    first_25_odd_numbers_CodeToParse: [
        'BEGIN first_25_pair_numbers',
        'WRITE "First 25 odd numbers \\n"',
        'DECLARE number firstNumber 0',
        'WHILE firstNumber < 50',
        'EXECUTE firstNumber = firstNumber + 1',
        'IF firstNumber % 2 != 0',
        'WRITE firstNumber + " is odd \\n"',
        'END IF',
        'END WHILE',
        'END first_25_pair_numbers'
    ],
    finonacci_series_CodeToParse: [
        'BEGIN FinonacciSeries',
        'WRITE "Série Fibonacci\\n"',
        'DECLARE number previous 0',
        'DECLARE number actual 1',
        'DECLARE number aux 1',
        'WHILE aux < 10',
        'EXECUTE aux ++',
        'WRITE "\\n" + actual',
        'DECLARE number next previous + actual',
        'EXECUTE previous = actual',
        'EXECUTE actual = next',
        'END WHILE',
        'END FinonacciSeries'
    ],
    number_avarage_CodeToParse: [
        'BEGIN TwoNumbersAvarage',
        'WRITE "2 number avarage\\n"',
        "DECLARE number media 0",
        'WRITE "Introduce a value for A: \\n"',
        "DECLARE number A 0",
        "READ A",
        'WRITE "Introduce a value for B: \\n"',
        "DECLARE number B 0",
        "READ B",
        'EXECUTE avarage = (A + B)/2',
        'WRITE "avarage = " + avarage',
        'END TwoNumbersAvarage'
    ],
    piramide_CodeToParse: [
        'BEGIN pyramid',
        'WRITE "Pyramid \\n"',
        'WRITE "Insert line number for the pyramid \\n"',
        'DECLARE number lines 0',
        'READ lines',
        'WHILE lines > 0',
        'DECLARE number columns lines',
        'WHILE columns > 0',
        'WRITE "*"',
        'EXECUTE columns --',
        'END WHILE',
        'EXECUTE lines --',
        'WRITE "\\n"',
        'END WHILE',
        'END pyramid'
    ],
    quadratic_equation_CodeToParse: [
        'BEGIN QuadraticEquation',
        'WRITE "Quadratic Equation\\n"',
        "DECLARE number x1 0",
        "DECLARE number x2 0",
        'WRITE "Introduce value for a: \\n"',
        "DECLARE number a 0",
        "READ a",
        'WRITE "Introduce value for b: \\n"',
        "DECLARE number b 0",
        "READ b",
        'WRITE "Introduce value for c: \\n"',
        "DECLARE number c 0",
        "READ c",
        'EXECUTE x1 = (-b + Math.sqrt((Math.pow(b,2) - 4*a*c)))/(2*a)',
        'EXECUTE x2 = (-b - Math.sqrt((Math.pow(b,2) - 4*a*c)))/(2*a)',
        'WRITE "x1 = " + x1 +  " v x2 = " + x2',
        'END QuadraticEquation'
    ],
    math_sin_CodeToParse: [
        'BEGIN Sin',
        'WRITE "Calculate Sin\\n"',
        'DECLARE number number 0',
        'READ number',
        'EXECUTE number = Math.sin(number)',
        'WRITE number + ""',
        'END Sin'
    ],
    math_tan_CodeToParse: [
        'BEGIN Tan',
        'WRITE "Calculate Tan\\n"',
        'DECLARE number number 0',
        'READ number',
        'EXECUTE number = Math.tan(number)',
        'WRITE number + ""',
        'END Tan'
    ],
    math_cos_CodeToParse: [
        'BEGIN Cos',
        'WRITE "Calculate Cos\\n"',
        'DECLARE number number 0',
        'READ number',
        'EXECUTE number = Math.cos(number)',
        'WRITE number + ""',
        'END Cos'
    ],
};
//# sourceMappingURL=resourceEN.js.map