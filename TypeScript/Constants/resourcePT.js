var fluxogramLanguagePT = {
    //PopUpExecutor
    ExecutorVariableExists: "Já existe uma variável com este nome!",
    ExecutorInvalidExpression: "Expressão inválida!",
    ExecutorSuccessMessage: "Algoritmo executado com sucesso, verifique o seu resultado na consola.",
    ExecutorInvalidWriteBlock: "O a instrução de ve ser do tipo texto e deve estar rodeada por aspas.",
    ExecutorDeclareErrorOne: "Esta variável é do tipo ",
    ExecutorDeclareErrorTwo: ", mas tem  ",
    ExecutorDeclareErrorThree: " como valor.",
    ReadPopUpWarningNoVariable: "A variável seleccionada já nao existe seleccione outra ou elimine o boco.",
    //IDE
    MemoryToolBarTitle: "MEMÓRIA",
    MemoryInnerToolBarTitle: "memória:",
    OutputToolBarTitle: "CONSOLA",
    BegginingBlockBegin: "Início",
    BegginingBlockEnd: "Fim",
    WhileBlockCondition: "Enquanto",
    DoWhileBlockCondition: "Enquanto",
    IfBlockTrueCondition: "Verdadeiro",
    IfBlockFalseCondition: "Falso",
    CodeTitleSentence: "Pseudocódigo",
    //New Block PopUp
    NewBlockitlePopUp: "Escolha o tipo de bloco a criar",
    //Container Block PopUp
    ContainerBlockTitlePopUp: "Criar Novo Bloco",
    ContainerBlockMessagePopUp: "Insira uma expressão válida: ",
    ContainerBlockEditMessagePopUp: "Edite a expressão do bloco: ",
    ContainerBlockEditTitlePopUp: "Editar Bloco",
    //Define Block PopUp
    DefineBlockTitlePopUp: "Criar Novo Bloco",
    DefineBlockEditTitlePopUp: "Editar Bloco",
    DefineErrorErasingBlockMessage: "Apagando este bloco, o fluxograma poderá ficar inválido, tente editar os blocos a amarelo.",
    DefineBlockVariableTypeLabel: "Tipo da variável:",
    DefineBlockVariableNameLabel: "Nome da variável:",
    DefineBlockVariableValueLabel: "Valor por defeito:",
    //variableTypesName
    variableTypesNameNumber: "número",
    variableTypesNameString: "texto",
    variableTypesNameBoolean: "lógico",
    //Read Block PopUp
    ReadBlockInstructionPopUp: "Variável a ler :",
    ReadBlockTitlePopUp: "Criar Novo Bloco",
    ReadBlockPopUpError: "Não existem variáveis para ler!",
    ReadBlockExecutionTextOne: "Insira o valor de ",
    ReadBlockExecutionTextTwo: " e pressione confirmar :",
    ReadBlockEditTitlePopUp: "Editar Bloco",
    BreakBlockEditTitlePopUp: "Editar Bloco",
    //Button Translations 
    ButtonCreatePopUp: "Criar Bloco",
    CloseButtonSentence: "Fechar",
    ButtonEditPopUp: "Editar Bloco",
    ButtonRemovePopUp: "Remover Bloco",
    ButtonCancelPopUp: "Cancelar",
    ButtonConfirmPopUp: "Confirmar",
    //Block name translation
    WhileBlock: "Bloco Enquanto",
    IfBlock: "Bloco Se / Não",
    DefineBlock: "Bloco Declarar",
    ReadBlock: "Bloco Ler",
    ExecuteBlock: "Bloco Executar",
    WriteBlock: "Bloco Escrever",
    DoWhileBlock: "Bloco Faz Enquanto",
    BreakBlock: "Bloco Quebra",
    ContinueBlock: "Bloco Continuar",
    //BreakBlock Fixed Instruction
    BreakBlockInstruction: "Quebra",
    ContinueBlockInstruction: "Continuar",
    //HelpPopUp
    HelpPopUpAbout: "Sobre",
    HelpPopUpTitle: "Menu de Ajuda",
    HelpPopUpTemplateTab: "Algoritmos",
    HelpPopUpBlocksTab: "Blocos",
    compareTwoNumberAlgSentence: "Comparar 2 números",
    evenNumbersAlgSentence: "Primeiros 25 Números par",
    oddNumbersAlgSentence: "Primeiros 25 Números ímpar",
    multiplicationAlgSentence: "Tabuada",
    pyramidAlgSentence: "Pirâmide",
    fibonacciAlgSentence: "Série de Fibonacci",
    twoNumberAvarageAlgSentence: "Média de 2 números",
    quadraticEquationAlgSentence: "Equação quadrática",
    calculateTanAlgSentence: "Calcular a Tan",
    calculateSinAlgSentence: "Calcular Sin",
    calculateCosAlgSentence: "Calcular Cos",
    masterTabAlgDecisionSentence: "Decisão",
    masterTabAlgIterationSentence: "Iteração",
    masterTabAlgCalculeSentence: "Cálculo",
    templatesTabInnerTitle: "algoritmos:",
    outputTabInnerTitle: "consola:",
    templatesTabOutterTitle: "ALGORITMOS",
    loadTemplateConfirmSentence: "Para carregar o algoritmo será necessário remover todos os blocos, deseja continuar?",
    compare_two_CodeToParse: [
        "BEGIN Compare_Two",
        'WRITE "Comparar dois números\\n"',
        'WRITE "Introduza um valor inteiro positivo para A: \\n"',
        "DECLARE number A 0",
        "READ A",
        'WRITE "Introduza um valor inteiro positivo para B: \\n"',
        "DECLARE number B 0",
        "READ B",
        "IF A == B",
        'WRITE "Os números fornecidos são iguais! \\n" ',
        'ELSE',
        'IF A > B',
        'WRITE "O número A é maior"',
        'ELSE',
        'WRITE "O número B é Maior"',
        'END IF',
        'END IF',
        'END Compare_Two'
    ],
    multiplication_tables_CodeToParse: [
        'BEGIN multiplication_tables',
        'WRITE "Calculo da tabuada \\n"',
        'WRITE "Introduza um valor inteiro positivo para tabuada \\n"',
        'DECLARE number numero 0',
        'READ numero',
        'IF numero <= 10 && numero >= 0',
        'DECLARE number auxiliar 0',
        'WHILE auxiliar < 10',
        'EXECUTE auxiliar = auxiliar + 1',
        'WRITE numero + " * " + auxiliar + " = " + (numero * auxiliar) + "\\n"',
        'END WHILE',
        'ELSE',
        'WRITE "Número inválido para calcular"',
        'END IF',
        'END multiplication_tables'
    ],
    first_25_even_numbers_CodeToParse: [
        'BEGIN first_25_pair_numbers',
        'WRITE "Primeiros 25 números par \\n"',
        'DECLARE number primeiroNumero 0',
        'WHILE primeiroNumero < 50',
        'EXECUTE primeiroNumero = primeiroNumero + 1',
        'IF primeiroNumero % 2 == 0',
        'WRITE "O número " + primeiroNumero + " é par! \\n"',
        'END IF',
        'END WHILE',
        'END first_25_pair_numbers'
    ],
    first_25_odd_numbers_CodeToParse: [
        'BEGIN first_25_pair_numbers',
        'WRITE "Primeiros 25 números ímpar \\n"',
        'DECLARE number primeiroNumero 0',
        'WHILE primeiroNumero < 50',
        'EXECUTE primeiroNumero = primeiroNumero + 1',
        'IF primeiroNumero % 2 != 0',
        'WRITE "O número " + primeiroNumero + " é ímpar! \\n"',
        'END IF',
        'END WHILE',
        'END first_25_pair_numbers'
    ],
    finonacci_series_CodeToParse: [
        'BEGIN FinonacciSeries',
        'WRITE "Série Fibonacci\\n"',
        'DECLARE number anterior 0',
        'DECLARE number actual 1',
        'DECLARE number aux 1',
        'WHILE aux < 10',
        'EXECUTE aux ++',
        'WRITE "\\n" + actual',
        'DECLARE number proximo anterior + actual',
        'EXECUTE anterior = actual',
        'EXECUTE actual = proximo',
        'END WHILE',
        'END FinonacciSeries'
    ],
    number_avarage_CodeToParse: [
        'BEGIN TwoNumbersAvarage',
        'WRITE "Média Aritmética de 2 Números\\n"',
        "DECLARE number media 0",
        'WRITE "Introduza um valor inteiro positivo para A: \\n"',
        "DECLARE number A 0",
        "READ A",
        'WRITE "Introduza um valor inteiro positivo para B: \\n"',
        "DECLARE number B 0",
        "READ B",
        'EXECUTE media = (A + B)/2',
        'WRITE "média: " + media',
        'END TwoNumbersAvarage'
    ],
    piramide_CodeToParse: [
        'BEGIN MySecondProject',
        'WRITE "Piramide \\n"',
        'WRITE "Insira um valor inteiro positivo para número de linhas \\n"',
        'DECLARE number linhas 0',
        'READ linhas',
        'WHILE linhas > 0',
        'DECLARE number colunas linhas',
        'WHILE colunas > 0',
        'WRITE "*"',
        'EXECUTE colunas --',
        'END WHILE',
        'EXECUTE linhas --',
        'WRITE "\\n"',
        'END WHILE',
        'END MySecondProject'
    ],
    quadratic_equation_CodeToParse: [
        'BEGIN QuadraticEquation',
        'WRITE "Equação de 2º grau\\n"',
        "DECLARE number x1 0",
        "DECLARE number x2 0",
        'WRITE "Introduza um valor para a: \\n"',
        "DECLARE number a 0",
        "READ a",
        'WRITE "Introduza um valor para b: \\n"',
        "DECLARE number b 0",
        "READ b",
        'WRITE "Introduza um valor para c: \\n"',
        "DECLARE number c 0",
        "READ c",
        'EXECUTE x1 = (-b + Math.sqrt((Math.pow(b,2) - 4*a*c)))/(2*a)',
        'EXECUTE x2 = (-b - Math.sqrt((Math.pow(b,2) - 4*a*c)))/(2*a)',
        'WRITE "x1 = " + x1 +  " v x2 = " + x2',
        'END QuadraticEquation'
    ],
    math_sin_CodeToParse: [
        'BEGIN Sin',
        'WRITE "Calcular Seno\\n"',
        'DECLARE number numero 0',
        'READ numero',
        'EXECUTE numero = Math.sin(numero)',
        'WRITE numero + ""',
        'END Sin'
    ],
    math_tan_CodeToParse: [
        'BEGIN Tan',
        'WRITE "Calcular Tangente\\n"',
        'DECLARE number numero 0',
        'READ numero',
        'EXECUTE numero = Math.tan(numero)',
        'WRITE numero + ""',
        'END Tan'
    ],
    math_cos_CodeToParse: [
        'BEGIN Cos',
        'WRITE "Calcular Cosseno\\n"',
        'DECLARE number numero 0',
        'READ numero',
        'EXECUTE numero = Math.cos(numero)',
        'WRITE numero + ""',
        'END Cos'
    ],
};
//# sourceMappingURL=resourcePT.js.map